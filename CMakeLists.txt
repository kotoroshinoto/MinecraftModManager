cmake_minimum_required(VERSION 3.6)

project(MinecraftModManager)

set(CMAKE_CXX_STANDARD 11)

SET(requiredlibs)

FIND_PACKAGE(CURL)
IF(CURL_FOUND)
    INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIRS})
    SET(requiredlibs ${requiredlibs} ${CURL_LIBRARIES} )
    MESSAGE(INFO "\tFound CURL version: ${CURL_VERSION_STRING} at path ${CURL_INCLUDE_DIRS}")
ELSE(CURL_FOUND)
    MESSAGE(FATAL_ERROR "Could not find the CURL library and development files.")
ENDIF(CURL_FOUND)

FIND_PACKAGE(OpenSSL)
IF(OpenSSL_FOUND)
    INCLUDE_DIRECTORIES(${OpenSSL_INCLUDE_DIR})
    SET(requiredlibs ${requiredlibs} ${OpenSSL_LIBRARIES} )
    MESSAGE(INFO "\tFound OpenSSL version: ${OPENSSL_VERSION} at path ${OPENSSL_INCLUDE_DIR}")
ELSE(OpenSSL_FOUND)
    MESSAGE(FATAL_ERROR "Could not find the OpenSSL library and development files.")
ENDIF(OpenSSL_FOUND)

FIND_PACKAGE(JNI)
IF(JNI_FOUND)
    INCLUDE_DIRECTORIES(${JNI_INCLUDE_DIR})
    SET(requiredlibs ${requiredlibs} ${JNI_LIBRARIES} )
    MESSAGE(INFO "\tFound JNI at path ${JAVA_INCLUDE_PATH}")
ELSE(JNI_FOUND)
    MESSAGE(FATAL_ERROR "Could not find the JNI library and development files.")
ENDIF(JNI_FOUND)

#FIND_PACKAGE(XercesC)
#IF(XercesC_FOUND)
#    INCLUDE_DIRECTORIES(${XercesC_INCLUDE_DIR})
#    SET(requiredlibs ${requiredlibs} ${XercesC_LIBRARIES} )
#ELSE(XercesC_FOUND)
#    MESSAGE(FATAL_ERROR "Could not find the XercesC library and development files.")
#ENDIF(XercesC_FOUND)

set(wxWidgets_CONFIG_OPTIONS --toolkit=base --prefix=/usr)
find_package(wxWidgets REQUIRED net gl core base)
IF(wxWidgets_FOUND)
    INCLUDE_DIRECTORIES(${wxWidgets_INCLUDE_DIR})
    SET(requiredlibs ${requiredlibs} ${wxWidgets_LIBRARIES} )
    MESSAGE(INFO "\tFound wxWidgets with configuration: ${wxWidgets_CONFIGURATION} at path ${wxWidgets_ROOT_DIR}")
ELSE(wxWidgets_FOUND)
    MESSAGE(FATAL_ERROR "\tCould not find the wxWidgets library and development files.")
ENDIF(wxWidgets_FOUND)

find_package(expat)
IF(EXPAT_FOUND)
    INCLUDE_DIRECTORIES(${EXPAT_INCLUDE_DIRS})
    SET(requiredlibs ${requiredlibs} ${EXPAT_LIBRARIES} )
    MESSAGE(INFO "\tFound expat at path ${EXPAT_INCLUDE_DIRS}")
ELSE(EXPAT_FOUND)
    MESSAGE(FATAL_ERROR "\tCould not find the expat library and development files.")
ENDIF(EXPAT_FOUND)

add_definitions(-D__WXMSW__ -D__GNUWIN32__ -D_UNICODE)

include(${wxWidgets_USE_FILE})

set(MinecraftModManager_SOURCE_FILES CACHE STRING "Application Source Files")
set(MinecraftModManager_HEADER_FILES CACHE STRING "Application Header Files")

add_subdirectory(src)

#MESSAGE(INFO "\tUpdated Main Source files: ${MinecraftModManager_SOURCE_FILES}")
#MESSAGE(INFO "\tUpdated Main Header files: ${MinecraftModManager_HEADER_FILES}")
add_executable(MinecraftModManager ${MinecraftModManager_SOURCE_FILES})
MESSAGE(INFO "\tLinking to libraries: ${requiredlibs}")
target_link_libraries(MinecraftModManager ${requiredlibs})
